import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletableFuture;

class CPIKafkaProducerServiceTest {

    @Mock
    private KafkaTemplate<String, String> kafkaCPITemplate;

    @Mock
    private TopicService topicService;

    @InjectMocks
    private CPIKafkaProducerService cpiKafkaProducerService;

    private final String clientId = "testClient";
    private final String flow = "testFlow";
    private final String message = "testMessage";
    private final String topicName = "testTopic";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSendMessage_Success() {
        // Given
        when(topicService.getTopicByClientIdAndFlow(clientId, flow)).thenReturn(topicName);
        CompletableFuture<SendResult<String, String>> future = CompletableFuture.completedFuture(mock(SendResult.class));
        when(kafkaCPITemplate.send(topicName, message)).thenReturn(future);

        // When
        boolean result = cpiKafkaProducerService.sendMessage(flow, clientId, message);

        // Then
        assertTrue(result);
        verify(kafkaCPITemplate).send(topicName, message);
        verify(topicService).getTopicByClientIdAndFlow(clientId, flow);
    }

    @Test
    void testSendMessage_TopicServiceFailure() {
        // Given
        when(topicService.getTopicByClientIdAndFlow(clientId, flow)).thenThrow(new RuntimeException("Topic service failure"));

        // When
        Exception exception = assertThrows(RuntimeException.class, () -> {
            cpiKafkaProducerService.sendMessage(flow, clientId, message);
        });

        // Then
        assertEquals("Topic service failure", exception.getMessage());
        verify(kafkaCPITemplate, never()).send(anyString(), anyString());
    }

    @Test
    void testSendMessage_KafkaFailure() {
        // Given
        when(topicService.getTopicByClientIdAndFlow(clientId, flow)).thenReturn(topicName);
        CompletableFuture<SendResult<String, String>> future = new CompletableFuture<>();
        when(kafkaCPITemplate.send(topicName, message)).thenReturn(future);

        // When
        boolean result = cpiKafkaProducerService.sendMessage(flow, clientId, message);
        future.completeExceptionally(new RuntimeException("Kafka failure"));

        // Then
        assertFalse(result);
        verify(kafkaCPITemplate).send(topicName, message);
        // Verify the error logging, if you have a logger and want to check the logs.
    }
}