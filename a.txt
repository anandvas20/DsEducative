import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.kafka.core.KafkaTemplate;

class EPCKafkaProducerServiceTest {

    @Mock
    private KafkaTemplate<String, String> kafkaEPCTemplate;

    @Mock
    private TopicService topicService;

    @InjectMocks
    private EPCKafkaProducerService epcKafkaProducerService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSendMessage_Success() {
        // Arrange
        String message = "Test Message";
        String sourceSystem = "EPC";
        String flow = "ack";
        String topicName = "test-topic";
        
        when(topicService.getTopicByClientIdAndFlow(sourceSystem, flow)).thenReturn(topicName);
        when(kafkaEPCTemplate.send(topicName, message)).thenReturn(null); // Mock future response

        // Act
        epcKafkaProducerService.sendMessage(message);

        // Assert
        verify(kafkaEPCTemplate, times(1)).send(topicName, message);
    }

    @Test
    void testSendMessage_Failure() {
        // Arrange
        String message = "Test Message";
        String sourceSystem = "EPC";
        String flow = "ack";
        String topicName = "test-topic";
        
        when(topicService.getTopicByClientIdAndFlow(sourceSystem, flow)).thenReturn(topicName);
        when(kafkaEPCTemplate.send(topicName, message)).thenThrow(new RuntimeException("Kafka failure"));

        // Act & Assert
        assertThrows(RuntimeException.class, () -> epcKafkaProducerService.sendMessage(message));
        verify(kafkaEPCTemplate, times(1)).send(topicName, message);
    }

    @Test
    void testSendMessage_LogsCorrectInfo() {
        // Arrange
        String message = "Test Message";
        String sourceSystem = "EPC";
        String flow = "ack";
        String topicName = "test-topic";
        
        when(topicService.getTopicByClientIdAndFlow(sourceSystem, flow)).thenReturn(topicName);
        when(kafkaEPCTemplate.send(topicName, message)).thenReturn(null); // Mock future response

        // Act
        epcKafkaProducerService.sendMessage(message);

        // You can capture logs here if you're using a logging framework like Logback for further testing
    }

    @Test
    void testSendMessage_NoTopicFound() {
        // Arrange
        String message = "Test Message";
        String sourceSystem = "EPC";
        String flow = "ack";
        
        when(topicService.getTopicByClientIdAndFlow(sourceSystem, flow)).thenReturn(null);

        // Act & Assert
        assertThrows(NullPointerException.class, () -> epcKafkaProducerService.sendMessage(message));
    }
}