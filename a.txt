import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.concurrent.CompletableFuture;

@ExtendWith(SpringExtension.class)
class CPIKafkaProducerServiceTest {

    @InjectMocks
    private CPIKafkaProducerService kafkaProducerService;

    @Mock
    private KafkaTemplate<String, String> kafkaCPITemplate;

    @Mock
    private TopicService topicService;

    @Mock
    private CompletableFuture<SendResult<String, String>> future;

    private String flow = "testFlow";
    private String clientId = "testClientId";
    private String message = "testMessage";
    private String topicName = "testTopic";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSendMessage_Success() {
        // Arrange
        when(topicService.getTopicByClientIdAndFlow(clientId, flow)).thenReturn(topicName);
        when(kafkaCPITemplate.send(topicName, message)).thenReturn(future);
        when(future.thenApply(any())).thenReturn(future);
        when(future.join()).thenReturn(mock(SendResult.class)); // Mock the SendResult

        // Act
        boolean result = kafkaProducerService.sendMessage(flow, clientId, message);

        // Assert
        assertTrue(result);
        verify(kafkaCPITemplate).send(topicName, message);
        verify(topicService).getTopicByClientIdAndFlow(clientId, flow);
    }

    @Test
    void testSendMessage_Failure() {
        // Arrange
        when(topicService.getTopicByClientIdAndFlow(clientId, flow)).thenReturn(topicName);
        when(kafkaCPITemplate.send(topicName, message)).thenReturn(future);
        when(future.thenApply(any())).thenThrow(new RuntimeException("Kafka error"));

        // Act & Assert
        CustomKafkaProcessingException exception = assertThrows(
            CustomKafkaProcessingException.class,
            () -> kafkaProducerService.sendMessage(flow, clientId, message)
        );

        assertEquals("Failed to send message", exception.getMessage());
        verify(kafkaCPITemplate).send(topicName, message);
        verify(topicService).getTopicByClientIdAndFlow(clientId, flow);
    }
}