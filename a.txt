

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class CPIKafkaListenerServiceTest {

    @Mock
    private EventService eventService;

    @Mock
    private TopicService topicService;

    @InjectMocks
    private CPIKafkaListenerService cpiKafkaListenerService;

    private final String sourceSystem = "CPI";
    private final String flow = "Inbound mag";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetTopic() {
        // Given
        String[] expectedTopics = {"topic1", "topic2"};
        when(topicService.getTopicNamesByClientIdAndFlow(sourceSystem, flow)).thenReturn(expectedTopics);

        // When
        String[] actualTopics = cpiKafkaListenerService.getTopic();

        // Then
        assertArrayEquals(expectedTopics, actualTopics);
        verify(topicService).getTopicNamesByClientIdAndFlow(sourceSystem, flow);
    }

    @Test
    void testGetContainerFactory() {
        // When
        String containerFactory = cpiKafkaListenerService.getContainerFactory();

        // Then
        assertEquals("cpikafkaListenerContainerFactory", containerFactory);
    }

    @Test
    void testGetGroupId() {
        // Given
        String expectedGroupId = "group1";
        when(topicService.getGroupIdByClientIdAndFlow(sourceSystem, flow)).thenReturn(expectedGroupId);

        // When
        String actualGroupId = cpiKafkaListenerService.getGroupId();

        // Then
        assertEquals(expectedGroupId, actualGroupId);
        verify(topicService).getGroupIdByClientIdAndFlow(sourceSystem, flow);
    }

    @Test
    void testProcessEventMessage() {
        // Given
        String message = "Sample event message";

        // When
        cpiKafkaListenerService.processEventMessage(message);

        // Then
        verify(eventService).processEventMessage(message);
    }
}